一. 操 作 符 :


    <1> != 
    
        不等于

    <2> < <= > >=
   
        小于大于 
    
    <3> and 并且 (语句复杂时,注意 优先级问题,加括号)
    
    <4> or 
    
        或
    
    <5> in
    
        在什么里面 

    <3> is null 
    
        获取为空 的那一个值.(检索一个为空的值.)
 


二. 子 句 :


    <1> where 

        where 过滤行数据,而不能过滤 group by 后的分组数据

    <2> between ... and ...
    
        在 值 and 值 之间

        select 字段 from 表 where 字段 between 100 and 200;


    <3> in , not , not in 

        in :

            in 操作符一般比 or 操作符 执行更快,由于mysql的原理.

            in 的最大优点 是可以包含其他 select 语句,

       not : 

        select * from bb where not age > 30;

        not in 

        select * from bb where id not in (6,7);

        作 用 : 在更复杂的子句中, not 是非常有用的.

                例如在与 in操作符联合使用时,not使找出与条件列表不匹配的行很简单.
        

    <4> ()
        
        区分一个子句 和其他 子句 :

        需要的时候 , 用 () 将语句包起来.

        select * from bb where (age =30 and sex='男') or id in (10,13);


    <5> like 
    
        <通配符> 按照指定的字段 搜索符合条件的数据 :

        _ 表一位, % 表所有,此通配语句需要用 '' 包起 

        select 字段 from 表 where 字段 like '20%'

        注 意 : 尽量不要把通配符放到搜索字符的前面

                通配符会使索引失效 !!!

        
        (1) '数据%' :  % 表示所有.
        
            该数据开头的所有.(只能是开头)

            select * from bb where username like 'c%';

            拓 展 : 已试验

                '%cc' 查 以cc结尾的 所有.

        (2) '数据_' :  _ 表示 一位 .
        
            数据开头的 是两位的所有.

            select * from bb where username like 'c_'

            拓 展 : 已试验 

                '__c' 查两位未知,一位确定是 c 的.

                '___' 查数据是 三位的.

        (3) '__c%' 混 合 使 用 : 

            select * from bb where username like '__c%'

            查第三位是 c 的 后面所有位都包括的 数据.

        (4) 不管数据类型 条件必须字符串格式:

            select * from bb where id like '1%';

        (5) '%name%'  包含


    <6> regexp 
    
        MySQL 的正则 

        where name regexp '[0-5]abc'


    <7> as 
        
        别 名 : 

        select id_name as id from bb; 


    <8> table_name.filed_name
    
        完 全 限 制 表 名 或 列 名 :

        select 字段 from 表

        select 表.字段 from 表

        select 表.字段 from 库.表


    <9> distinct 

        去 重 :

        次关键字,指示MySQL只返回不同的值.

        语 法 : select 后面 加 distinct

        示 例 : select distinct age from bb;
    

    <10> limit 
    
        限制结果数量(和跳行),写在最后

        limit 1,1 跳过一条读一条

        select a from bb limit 4,4;


    <11> order by  升序 
    
         order by ... desc 降序


    <12> union :

         组 合 查 询 : 多条一起查,返回一个大的结果.

         规 则 :

            <1> 必须 2条以上 select语句 组成. 

            <2> 语句间 用union关键字分隔

                示 例 : select * from t1 union select * from t2;

            <3> 查询的每列 必须包含相同的 查询语句类型.(字段,聚集函数等)

            <4> 列的数据类型 必须兼容.

            <5> union all 
            
                union all 获取所有不去重结果.union查询的结果默认是去重的.

            <6> order by 
            
                只能用在最后一条语句中.


    <13> is null

         查询语句中是空值的,配合where

         select id from 表 where price is null;

         isnull(avg(sc.Score)

         select ... left join ... having... or isnull(avg(sc.Score))

         查询左边有成绩的和剩余没有成绩的,通常having过滤掉null值,但可是用
         or isnull(avg...) 再次显示null值

         示例:
         select s.Sid,s.Sname,avg(sc1.Score) from student s 
         left join score sc1 on s.Sid=sc1.Sid group by s.Sid having 
         avg(sc1.Score)<60 or isnull(avg(sc1.Score))


    <14> ifnull()

        判断第一个表达式是否为null,不为null则返回第一个参数的值,如果为null则返回第二个参数的值.


  分 组 : group by 

        用到聚合函数 就要用到分组,分组再聚合.不然是全部的(sum(),count()等)
  
        将一个字段中,拥有相同名称的. 
        
        查哪个字段 就要对哪个字段进行 group by

    <1> group by 
    
        字段名 :
        
        select sex,count(id) from bb group by sex;


    <2> 多 重 分 组 :

        在当前的检索的列中,除了聚集函数不用列到分组上,其他列都需要在分组后面列出

        select class,cname,count(*) from bb group by class,cname;


    <3> 暂无用count(id) = 3 :

        将 count 的默认值,改为3, 所以 当次数 达到 3 时,才会显示 1次.


        having : 在原有 分组 得到次数后,再进行 细化:having count(*)/别名=某次数;

        having = 某次数 也可以是 >= 或者其他 : having count(*)/别名>=某次数


        注 意 : 只能用在 group by 后面,对已经分组的结果,再进行过滤.

            select age,count(id) as num from bb group by age having num =1;


四. join 子 句 :


    <1> cross join    cross : 交叉    笛卡尔积

        语 法 : select t1.id,t2.id from t1 cross join t2;
        
        用t1中所有id数据分别对t2中所有id数据一一匹配.


    <2> inner join 从cross join 的基础上 得到符合条件的查询结果.

        内连接就是求两个表的交集,从交叉配对上选出满足 on子句 条件的数据.

        语 法 : select t1.id,t2.id from t1 inner join t2 on t1.person.t2.person


    <3> left join 

        左连接的含义就是求两个表的交集外加左表的剩下数据.就是从交叉配对中

        挑出 on子句 条件成立的记录,然后加上左表的剩余记录.

        语 法 : select t1.id,t2.id from t1 left join t2 on t1.person=t2.person;


    <4> left join

        右连接的含义就是求两个表的交集外加右表的剩下数据.就是从交叉配对中

        挑出 on子句 条件成立的记录,然后加上右表的剩余记录.

        语 法 : select t1.id,t2.id from t1 right join t2 on t1.person=t2.person;



五. Select 子 句 及 写 顺 序 :


    子句        说明                    是否必须

    Select      要返回的列或表达式      是

    From        从中检索数据的表        仅在从表选择数据时使用

    Where       行级过滤                否

    Group by    分组说明                否

    Having      组级过滤                否

    Order by    输出排序顺序            否

    Limit       要检索的行数            否



六. Select 指 令 的 执 行 顺 序 :

    From Select Where group by having order by limit;  
