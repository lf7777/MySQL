一. SQL Structured Query Language : 结构化 查询 语言


    SQL 语 言 分 类 :

        1. DQL : 数据 查询 语言  (Data Query Language)

        2. DML : 数据 操纵 语言  (Data Manipulation Language)

        3. DDL : 数据 定义 语言  (Data Definition Language)

        4. DCl : 数据 控制 语言  (Date Control Language)


        1. DQL 数据 查询

            基本结构由 select子句 from子句 where子句 构成


        2. DML 数据 操纵

            1. insert 插入

            2. update 更新

            3. delete 删除

            4. select 查询


        3. DDL 数据 定义 

           创建数据库中的 库,表,视图,索引,同义词,聚簇等
           如 :
           create table/view/index/sysn 等


        4. DCL 数据 控制
           用来授权或回收访问数据库的某种特权,并控制数据库操纵事物发生的时间
               及效果,对数据库进行监视等.

           1. grant 授权

           2. rollback 回滚

           3. commit 提交


    意 义 : 如果访问量很大,相比直接读取文件,通过数据管理软件,方便操作数据.

    功 能 : 
            
        1. 数据的 持久化保存 和 添加 删除 修改 查询.

        2. 高效率查询并提取满足条件的数据,数据访问速度快.

        3. 约束存储的数据类型.
        
        4. 支持远程数据共享和权限管理.


    关 系 型 数 据 库 : (MySQL.Oracle.Microsoft SQL Server.PgSQL)

        特 点 :

            1.数据以表格的形式出现,每个表有自己的名字(同数据库内唯一),表内被组织

            为行和列的一一对应关系.

            2.行为各种数据记录名称.

            3.列为记录名称所对应的数据域.

            4.许多的行和列组成一张表格.

            5.若干的表格组成关系型数据库(database),每个数据库有自己的名字(唯一)


    非 关 系 型 数 据 库 : (Redis.Mongodb)



二. MySQL 

    
    概 念 : 

        1. 库    像文件夹,里面存放多个表(文件),通常一个项目一个库.

        2. 表    表像excel中的一个表格,里面有很多的 字段数据(行,列).

        3. 行    一行数据.

        4. 列    一列数据.

        5. 字段  列的头.一列数据的一个表示.

        6. 主 键 : 每个行信息 在数据库中的 <唯一的标识>,类似身份证.
               
               作 用 : 快速的找到 这一行的数据.


    常见英文: 1. information_schema 信息架构

              2. performance_schema 性能架构

              3. table 表(mysql里表) 

              4. drop 删除

              5. select 选择

              6. alter 改变

              7. record 记录

              8. duplicate 复制

              9. distinct 去重



  服务器处理客户请求的过程 :

      客户端进程向服务器进程发送一段文本(MySQL语句),服务器进程处理后再向

          客户端进程发送一段文本(处理结果)

    1. 连接管理 : 处理连接,账号密码,验证权限,可做什么事情,从哪里登录等事.

    2. 解析与优化 :

        (1) 查询缓存 : 比如查询是不是上一条语句的重复,如果是则直接返回结果.

                       Mysql 8 版本已经删除查询缓存这一步骤.

        (2) 语法解析 : 语法格式是否符合标准.

        (3) 查询优化 : 查看是否有优化的可能性(是否有索引),如果有优化,则根据优化
                
                       进行查询.

    3. 存储引擎 : MyISAM InnoDB Memory (MySQL通过 InnoDB引擎) 查找文件系统.



  MySQL 存 储 引 擎  :

     功 能 : 以前叫做表处理器,它的功能就是接收上层传下来的指令,

             然后对表中的数据进行读取或写入操作.

     不同的存储引擎管理的表具体的存储结构可能不同,采取的存取算法也可能不同.


     1.  InnoDB 具备外键支持功能的事物存储引擎.
       
           表结构为 .frm 存储表结构, .ibd 存储数据和索引.


     2.  MyISAM 主要的非事物处理存储引擎

           表结构为 .frm 存储表结构, .MYD 存数据, .MYI 存索引


     3.  ARCHIVE 用于数据存档(行被插入后不能再修改)


     4.  BLACKHOLE 丢弃写操作,读操作会返回空内容


     5.  CSV 在存储数据时,以逗号分割各个数据项


     6.  FEDRATED 用来访问远程表


     7.  MEMORY 置于内存表

     8.  MERGE 用来管理非事物处理存储引擎

     9.  NDB MySQL集群专用存储引擎



  Ubuntu MySQL 目 录 相 关 :

    1. data数据库文件在 /var/lib/mysql 文件里,这个路径就是 data 的文件夹.

       ubuntu 并无 data文件,它的mysql文件是散落在不同的位置上.



  MySQL 字 符 集 相  关 :

    MySQL 的 utf8 采用的是 1 ~ 3个字节来表示一个字符,正常是 1 ~ 4个字节.

        所以不能存所有中文,所以推出了 utf8mb4 ,完整版的 utf-8



  MySQL 语 法 :

    1. \c 让语句 失效.
    
    2. \G 每行数据 以每行显示.

    3. \q 退出 MySQL


三. 基 本 操 作 :

    <1> 开启关闭 MySQL 服务 相关:

        (1) linux :
            
            查看已经开启的服务 : 
            service --status-all

            开 启 :
            service mysql start

            关 闭 :
            service mysql stop

        (2) windows :

            开 启 : 
            net start mysql

            关 闭 :
            net stop mysql


    <2> 存 储 引 擎 切 换 相 关 : 

        (1) 查看 当前MySQL服务器支持的存储引擎 :
            show engines;

        (2) 当表创建时 设置 表存储引擎 : (存储引擎用字符串)
            create table 表名(建表语句) engine='存储引擎名称';

        (3) 修改 表的存储引擎 : 
            alter table 表名 engine='存储引擎名称'



四. 库 操 作 :


    <1> 查 看 所 有 库 :
        show databases;

    <2> 创 建 一 个  库 :
        create database library_name default charset='utf8mb4';

    <3> 打 开 一  个 库 :
        use library_name;

    <4> 删 除 一 个 库 :
        drop database library_name;



五. 表 操 作 :


    <1> 查 看 库 中 所 有 表 :
        show tables;


    <2> 查 看 表 结 构 :
        desc 表名;


    <3> 查 看 建 表 语 句 :
        show create table 表名;
        

    <4> 创 建 表 : (int:最大存42亿,需要运算的存int)

        创建表时 <需指定 字段 和 类型>,
        varchar()是字符串类型,参数为 不超过参数个字符.  

     ! ! ! 注 意 : ! ! ! 是在 <当前> 的库中创建,如表明相同则覆盖了.切记.

        create table table_name(
        id int,
        username varchar(30),
        age int,
        phone varchar(11)
        );
        
    <5> 删 除 表 :
        drop table table_name;


    <6> 查 看 表 中 的 数 据 :
        select * from table;

        select * from table where username='张三'
            
            查的 table表中 username为张三的一行.

        select id from table where username='张三'

            查的 table表中 username为张三的一行中的 id数据.


    <7> 修 改 表 结 构 :


      添 加 字 段 :

        (1) 添加字段:
            alter table 表名 add 字段信息;(默认最后)

            alter table bb add sex char(1) not null default '男';
        
        
        (2) 在某个字段 后添加:
            alter table 表名 add 字段信息 after 字段名;
        
            alter table bb add sex char(1) not null default '男' after name;
        
        (3) 在表的 最前面 添加字段:
            alter table 表名 add 字段信息 first;

            alter table bb add sex char(1) not null default '男' first;
        
      删 除 字 段 : 
        
        (1) alter table 表名 drop 要被删的字段名;
        

      修 改 字 段 类 型 :

        !!!注 意 : 修改表中字段的数据类型时,注意,如果有数据存在,
               
               要确认原有的数据类型是否符合修改后的数据类型. 

        change 可同时 改字段名, modify 不可同时 改字段名.

        
        (1) change
            alter table 表名 change 新字段名 将要改字段 新字段名 
            指定新的类型 及 约束(或不约束);

            alter table bb modify old_name new_name varchar(20) default '未命名'

        
        (2) modify 
            alter table 表名 modify 将要改的字段 指定新的类型 及 约束(或不约束);
        
                注 意 : 字段类型必须写,约束 不写则 <恢复系统默认>.

                alter table bb modify username varchar(20) default '未命名';



六. 表 数 据 相 关 :

  注 意 : 

        1. 如果表中数据 不允许为空 , 且没设置默认值,在添加时必须给数据.

        2. 修改值时,必须加where 找到某个某些歌,不加则所有都改了.



    <1> 给 表 添  加 数 据 : 只添加一条

      1.指定字段 按照字段的顺序添加数据 :

        insert into table_name(字段名,字段名) values(content,content)
        写()表示要指定 <字段> 指定的字段 <顺序随意>.

        示 例 :
        insert into test(id,username,phone,age) values(1,'张三','159000',24)


      2.不指定字段,但要按表的 字段顺序添加 :
        
        示 例 :
        insert into test values(表的字段1,表的字段2,表的字段3....)


      3.批量 指定字段 :
        
        insert into list(id,username,phone,age) values
        (2,'a','1',20),
        (3,'b','2',21),
        (4,'c','3',22),
        (5,'d','4',23),
        (6,'e','5',24);
       
       4.批量 不指定字段 按照表字段顺序 : 

        insert into list values
        (2,'a','1',20),
        (3,'b','2',21),
        (4,'c','3',22),
        (5,'d','4',23),
        (6,'e','5',24);

        5.主键为自增, <指定字段添加>,主键自动加1.

        insert into list(username,age) values('a',22);

        注 意 : 删除了其中的某一行数据,自增不会断,不会补(比如删的10,再增是11)

        不指定字段 为主键设置 null 自动自增

        insert into table_name values(null,'a',22);


    <2> 给 表 删  除 数 据 :

        (1) 删除 单条 数据 :
            delete from table_name where field_name=数据;

        示 例 : 
            delete from list where username='a';

        中文翻译为:从哪个表 删除哪个字段 的数据为 什么的信息.

        (2) 删除 多条 数据 :

            delte from table_name where id=1 or id =2 or id = 3;

            或 :

            delte from table_name where id in(1,2,3);


        (2) 删除 大于 200的数据 :
            delete from 表名 where id>200;
        

    <3> 修 改 表 的 数 据 : 

        1. 修改单个字段的单个值 :

        update table_name set filed_name=新数据 where filed_name=某个字段;

        示 例 :
        update list set age=30 where username='c';

        中文翻译:更新设置某表的字段数据为新的值,改字段为哪里的.

        2. 修改多个字段的值,及多个行的 : 

        update table_name set age=11,sex='女' where id=2 or id=10 or id=20;

        或 :

        update table_name set age=11,sex='女' where id in(2,10,20);

    
    <4> 查 看 表 中 的 数 据 :

      语 法 :

        select 查什么东西(要啥结果) 从哪查(给出条件);

        (1) 慎用 !!!获取表中的 所有数据 :
            select * from tablename;

            注 意 : 如果表中 有几十万条数据,则一下全部查到,可能服务器挂机了.


        (2) 获取表中 某个 单列 :
            select 列名 from tablename;


        (3) 获取表中 某个 单/多行:
            select * from tablename where id=6;
            select * from tablename where id=6 or id = 7;
            select * from tablename where id in (6,7);


        (4) 获取表中 某个符合条件的 数据 行:
            select * from tablename where id in (6,7,8) and username = 'bb';
            select username from tablename where sex='男' and age > 30;

        (5) 查两个东西 
            select name,age from ...


    创 建 虚 拟 数 据 :

        语 法 : select id ,表达式 as 新列名 from tablename;

        示 例 : select id,username,2+2 as id1 from bb;
                elect id,username,'长的好看的' as id1 from bb;


    去 重 (获取表中的 年龄分布) :

        语 法 : select 后面 加 distinct
        
        示 例 : select distinct age from bb;


    限 数 limit (限制结果的数量) :

        1.从 头 取 : 
        
        语 法 : select ..... 末尾 limit 数字; 表示只取 数字个数据.

        示 例 : select * from bb limit 3; 只取3行数据.

        2.跳 过 多 少 取 :

        语 法 : select ...末尾 limit 2,3; 表示 跳过前两条取后面的三条.


    数 据 排 序 : order by (默认升序)

        不指定 顺序时,数据展示的顺序为 : 数据 在文件中的顺序.

        1. 升 序 :

        语 法 : select ...末尾 order by 字段;

        示 例 : select * from bb order by id;

        2. 降 序 :
        
        语 法 : select ...末尾 order by 字段 desc;

        示 例 : select * from bb order by id desc;
        

        和 limit 混用 :

        示 例 : select * from bb order by id desc limit 5;

            limit 必须 在 order by 语句后,并且最后.

        3. 多 列 排 序 :

        语 法 : select .... 末尾 order by age,id;

        desc : desc 按照 放在排序规则的后面.

        语 法 : select ...末尾 order by age desc,id desc;

        
            

六. 其 他 :


    <1> md5 :

        select md5('aa123456')

            return 32位 固长
